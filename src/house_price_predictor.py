import os
import logging
import pickle
import pandas as pd
from typing import Dict, List
from dotenv import load_dotenv
import telebot
from telebot.types import Message
from sklearn.model_selection import train_test_split, RandomizedSearchCV
from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error
from sklearn.ensemble import GradientBoostingRegressor, RandomForestRegressor
from sklearn.preprocessing import StandardScaler
from sklearn.impute import SimpleImputer
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    filename="../house_price_predictor.log",
    filemode="a"
)
class Config:
    TEST_SIZE = 0.2
    RANDOM_STATE = 42
    CV_FOLDS = 5
    RF_PARAMS = {
        "model__n_estimators": [100, 200, 300],
        "model__max_depth": [None, 10, 20],
        "model__min_samples_split": [2, 5, 10]
    }
    GBR_PARAMS = {
        "model__n_estimators": [100, 200, 300],
        "model__learning_rate": [0.01, 0.1, 0.2],
        "model__max_depth": [3, 4, 5]
    }
    DATA_PATH = "../data/house_price_regression_dataset.csv"
    MODEL_DIR = "../models"
    MODEL_PATH = os.path.join(MODEL_DIR, "house_price_best_model.pkl")
    BOT_VERSION = "1.0.0"
FIELDS = [
    'Square_Footage', 'Num_Bedrooms', 'Num_Bathrooms',
    'Year_Built', 'Lot_Size', 'Garage_Size', 'Neighborhood_Quality'
]
FIELD_DESCRIPTIONS = {
    'Square_Footage': '–ü–ª–æ—â–∞–¥—å –¥–æ–º–∞ (–∫–≤. —Ñ—É—Ç—ã)',
    'Num_Bedrooms': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∞–ª–µ–Ω',
    'Num_Bathrooms': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç',
    'Year_Built': '–ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏',
    'Lot_Size': '–†–∞–∑–º–µ—Ä —É—á–∞—Å—Ç–∫–∞ (–∫–≤. —Ñ—É—Ç—ã)',
    'Garage_Size': '–†–∞–∑–º–µ—Ä –≥–∞—Ä–∞–∂–∞ (–∫–æ–ª-–≤–æ –º–∞—à–∏–Ω)',
    'Neighborhood_Quality': '–ö–∞—á–µ—Å—Ç–≤–æ —Ä–∞–π–æ–Ω–∞ (1-10)'
}
def train_model():
    """–û–±—É—á–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
    try:
        data_house = pd.read_csv(Config.DATA_PATH)
        logging.info("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    except FileNotFoundError:
        logging.error(f"–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω: {Config.DATA_PATH}")
        print(f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª {Config.DATA_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        exit(1)
    data_house.drop_duplicates(inplace=True)
    logging.info("–î—É–±–ª–∏–∫–∞—Ç—ã —É–¥–∞–ª–µ–Ω—ã")
    price_column = next((col for col in data_house.columns if 'price' in col.lower()), None)

    if not price_column:
        logging.error("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ —Å —Ü–µ–Ω–æ–π –¥–æ–º–∞")
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ —Å —Ü–µ–Ω–æ–π –¥–æ–º–∞")
        exit(1)
    logging.info(f"–ù–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ —Å —Ü–µ–Ω–æ–π: {price_column}")

    X = data_house.drop(columns=[price_column])
    y = data_house[price_column]
    num_features = X.select_dtypes(include=["int64", "float64"]).columns.tolist()

    preprocessor = ColumnTransformer([
        ("num", Pipeline([
            ("imputer", SimpleImputer(strategy="median")),
            ("scaler", StandardScaler())
        ]), num_features)
    ])
    def create_pipeline(model):
        return Pipeline([
            ("preprocessor", preprocessor),
            ("model", model)
        ])

    def tune_model(model_class, params, X, y):
        pipeline = create_pipeline(model_class(random_state=Config.RANDOM_STATE))
        search = RandomizedSearchCV(
            estimator=pipeline,
            param_distributions=params,
            n_iter=10,
            cv=Config.CV_FOLDS,
            scoring='r2',
            n_jobs=-1,
            verbose=1,
            random_state=Config.RANDOM_STATE
        )
        search.fit(X, y)
        return search.best_estimator_

    X_train, X_test, y_train, y_test = train_test_split(
        X,
        y,
        test_size=Config.TEST_SIZE,
        random_state=Config.RANDOM_STATE
    )

    logging.info("–ù–∞—á–∞–ª–æ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π!!")
    rf_model = tune_model(RandomForestRegressor,
                          Config.RF_PARAMS,
                          X_train, y_train)
    gbr_model = tune_model(GradientBoostingRegressor,
                           Config.GBR_PARAMS,
                           X_train, y_train)

    rf_score = r2_score(y_test,
                        rf_model.predict(X_test))
    gbr_score = r2_score(y_test,
                         gbr_model.predict(X_test))

    best_model = rf_model if rf_score > gbr_score else gbr_model

    best_score = max(rf_score, gbr_score)

    logging.info(f"–õ—É—á—à–∞—è –º–æ–¥–µ–ª—å: {'RandomForest' if rf_score > gbr_score else 'GradientBoosting'}, R2: {best_score}")

    os.makedirs(Config.MODEL_DIR, exist_ok=True)

    try:
        with open(Config.MODEL_PATH, "wb") as f:
            pickle.dump(best_model, f)
        logging.info(f"–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {Config.MODEL_PATH}")
        print(f"‚úÖ –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {Config.MODEL_PATH}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏: {e}")
        exit(1)

    return best_model

class HousePricePredictor:
    def __init__(self):
        self.bot = None
        self.model = None
        self._initialize()

    def _initialize(self):
        try:
            load_dotenv()
            bot_token = os.getenv('BOT_TOKEN')
            if not bot_token:
                raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env!")
            self.bot = telebot.TeleBot(bot_token)
            logging.info(f"–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Ç–æ–∫–µ–Ω–æ–º: {bot_token[:10]}...")

            if os.path.exists(Config.MODEL_PATH) and os.path.getsize(Config.MODEL_PATH) > 0:
                try:
                    with open(Config.MODEL_PATH, "rb") as f:
                        self.model = pickle.load(f)
                    logging.info("–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞")
                except Exception as e:
                    logging.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}. –ü–µ—Ä–µ–æ–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å...")
                    print(f"–ú–æ–¥–µ–ª—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞, –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ...")
                    self.model = train_model()
            else:
                print("–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞, –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ...")
                self.model = train_model()

            self._register_handlers()
            logging.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            raise

    def _register_handlers(self):
        @self.bot.message_handler(commands=['start'])
        def handle_start(message: Message):
            self._send_welcome(message)

        @self.bot.message_handler(commands=['help'])
        def handle_help(message: Message):
            self._send_help(message)

        @self.bot.message_handler(commands=['fields'])
        def handle_fields(message: Message):
            self._send_fields(message)

        @self.bot.message_handler(commands=['predict'])
        def handle_predict(message: Message):
            self._start_prediction(message)

        @self.bot.message_handler(commands=['about'])
        def handle_about(message: Message):
            self._send_about(message)

        @self.bot.message_handler(func=lambda m: True)
        def handle_message(message: Message):
            self._process_prediction(message)

    def _send_welcome(self, message: Message):
        welcome_text = (
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ü–µ–Ω –Ω–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å.\n\n"
            "üè† –ü–æ–º–æ–≥—É –æ—Ü–µ–Ω–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–º–∞.\n"
            "üìä –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /predict –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è.\n"
            "‚ùì –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –í–≤–µ–¥–∏—Ç–µ /help.\n"
            "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ: /about"
        )
        self.bot.reply_to(message, welcome_text)

    def _send_help(self, message: Message):
        help_text = (
            "üîç –ö–æ–º–∞–Ω–¥—ã:\n"
            "/start - –ù–∞—á–∞—Ç—å\n"
            "/predict - –ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—É\n"
            "/fields - –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª–µ–π\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
            "/about - –û –±–æ—Ç–µ"
        )
        self.bot.reply_to(message, help_text)

    def _send_fields(self, message: Message):
        text = "üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:\n\n"
        for i, field in enumerate(FIELDS, 1):
            text += f"{i}. {FIELD_DESCRIPTIONS[field]}\n"
        text += "\n–ü—Ä–∏–º–µ—Ä: 2500, 3, 2, 2010, 5000, 2, 8"
        self.bot.reply_to(message, text)

    def _send_about(self, message: Message):
        about_text = (
            "‚ÑπÔ∏è **–û –±–æ—Ç–µ**\n\n"
            "üè† –ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–º–∞.\n"
            f"üìå –í–µ—Ä—Å–∏—è: {Config.BOT_VERSION}\n"
            "üë®‚Äçüíª –ê–≤—Ç–æ—Ä: [–í–∞—à–µ –∏–º—è]\n"
            "üìÖ –°–æ–∑–¥–∞–Ω: –ú–∞—Ä—Ç 2025"
        )
        self.bot.reply_to(message, about_text)
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª /about")

    def _start_prediction(self, message: Message):
        text = "üìù –í–≤–µ–¥–∏—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n\n"
        for i, field in enumerate(FIELDS, 1):
            text += f"{i}. {FIELD_DESCRIPTIONS[field]}\n"
        text += "\n–ü—Ä–∏–º–µ—Ä: 2500, 3, 2, 2010, 5000, 2, 8"
        self.bot.reply_to(message, text)

    def _validate_input(self, values: List[str]) -> Dict:
        if len(values) != len(FIELDS):
            raise ValueError(f"–û–∂–∏–¥–∞–µ—Ç—Å—è {len(FIELDS)} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –ø–æ–ª—É—á–µ–Ω–æ {len(values)}")
        try:
            validated = {
                'Square_Footage': float(values[0]),
                'Num_Bedrooms': int(values[1]),
                'Num_Bathrooms': int(values[2]),
                'Year_Built': int(values[3]),
                'Lot_Size': float(values[4]),
                'Garage_Size': int(values[5]),
                'Neighborhood_Quality': int(values[6])
            }
            if not 1 <= validated['Neighborhood_Quality'] <= 10:
                raise ValueError("–ö–∞—á–µ—Å—Ç–≤–æ —Ä–∞–π–æ–Ω–∞: 1-10")
            if validated['Year_Built'] > 2025 or validated['Year_Built'] < 1900:
                raise ValueError("–ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏: 1900-2025")
            if any(v < 0 for v in validated.values()):
                raise ValueError("–ó–Ω–∞—á–µ–Ω–∏—è –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏")
            return validated
        except ValueError as e:
            raise ValueError(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞: {str(e)}")

    def _process_prediction(self, message: Message):
        try:
            values = [v.strip() for v in message.text.split(',')]
            validated_data = self._validate_input(values)
            input_df = pd.DataFrame([validated_data])
            prediction = self.model.predict(input_df)[0]

            response = (
                "üè† –†–µ–∑—É–ª—å—Ç–∞—Ç:\n\n"
                f"üí∞ –¶–µ–Ω–∞: ${prediction:,.2f}\n\n"
                "üìã –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n"
            )
            for field, value in zip(FIELDS, values):
                response += f"‚û°Ô∏è {FIELD_DESCRIPTIONS[field]}: {value}\n"
            self.bot.reply_to(message, response)
            logging.info(f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è {message.from_user.id}: ${prediction:,.2f}")
        except ValueError as e:
            self.bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /predict")
        except Exception as e:
            self.bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {e}")

    def run(self):
        logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        self.bot.polling(none_stop=True, interval=0, timeout=20)

def main():
    try:
        predictor = HousePricePredictor()
        predictor.run()
    except Exception as e:
        logging.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        exit(1)

if __name__ == "__main__":
    main()